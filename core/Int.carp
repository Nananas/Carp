(defmodule Int
  (register + (λ [Int Int] Int))
  (register - (λ [Int Int] Int))
  (register * (λ [Int Int] Int))
  (register / (λ [Int Int] Int))
  (register < (λ [Int Int] Bool))
  (register > (λ [Int Int] Bool))
  (register = (λ [Int Int] Bool))
  (register /= (λ [Int Int] Bool))
  (register mod (λ [Int Int] Int))
  (register seed (λ [Int] ()))
  (register random (λ [] Int))
  (register random-between (λ [Int Int] Int))
  (register str (λ [Int] String))
  (register from-string (λ [&String] Int))
  (register bit-shift-left (λ [Int Int] Int))
  (register bit-shift-right (λ [Int Int] Int))
  (register bit-and (λ [Int Int] Int))
  (register bit-or (λ [Int Int] Int))
  (register bit-xor (λ [Int Int] Int))
  (register bit-not (λ [Int] Int))
  (register inc (λ [Int] Int))
  (register dec (λ [Int] Int))
  (register copy (λ [&Int] Int)) ;; TODO: Should not be needed when refs to value types are auto-converted to non-refs.
  (register format (Fn [&String Int] String))

  (register safe-add (λ [Int Int (Ref Int)] Bool))
  (register safe-sub (λ [Int Int (Ref Int)] Bool))
  (register safe-mul (λ [Int Int (Ref Int)] Bool))

  (register abs (λ [Int] Int))

  (defn even? [a] (= (mod a 2) 0))
  (defn odd? [a] (not (even? a)))

  (defn zero []
    0)

  (defn add-ref [x y]
    (Int.+ @x @y))

  (defn clamp [min, max, val]
    (if (> val max)
      max
      (if (< val min)
        min
        val)))

  (defn pow [x y]
    (let-do [r 1]
      (while (/= y 0)
        (do
          (when (/= (bit-and y 1) 0)
            (set! r (* r x)))
          (set! y (/ y 2))
          (set! x (* x x))))
      r))
)

(defmodule IntRef
  (defn = [a b]
    (Int.= @a @b))

  (defn < [a b]
    (Int.< @a @b))

  (defn > [a b]
    (Int.> @a @b))
)
