(use Int)
(use Array)
(use IO)
(use String)
(use System)

(defmacro ++ [:rest strs]
  (string-join- strs))


(load "sdl.carp")
(load "sdl_image.carp")
(load "match.carp")
(load "render.carp")
(load "state.carp")
(load "mapgen.carp")

(defn main []
  (do
    (seed (time))
    (let-do [app (app-init @"Cells" 800 600)
            rend (app-renderer app)
            cells (filter validcell (genallcells))
            start-cell (Cell.init @(pick-random &cells) (Pos.init half-width half-height))
            state (state-new
                    (dig &cells 100 LEFT [@&start-cell]))
            ; texture (IMG_LoadTexture rend (cstr "./resources/tree.png"))
            ]
      (while true
        (do
          (handle-events &app rend &state)
          (update-state &state)

          (when (= (count (State.data &state)) 0)
            (State.set-data! &state (dig &cells 100 LEFT [@&start-cell])))
          (SDL_SetRenderDrawBlendMode rend SDL_BLENDMODE_BLEND)
          (SDL_SetRenderDrawColor rend 0 0 0 0)
          (SDL_RenderClear rend)

          (for [i 0 (count (State.data &state))]
            (let [n (nth (State.data &state) i)]
              (render-cell
                (Cell.data n)
                @(Pos.x (Cell.pos n))
                @(Pos.y (Cell.pos n))
                rend
                @(State.cx &state)
                @(State.cy &state))))

          ; (SDL_RenderCopy rend texture (address (make-rect 0 0 100 100)) (address (make-rect 100 100 100 100)))
          (SDL_RenderPresent rend)
          (SDL_Delay 16))))
    ()))
