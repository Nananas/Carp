
(def TS 4)
(def CS 12)
(def SCALE 4)
(def App-width 800)
(def App-height 600)
(def half-width (/ 400 SCALE))
(def half-height (/ 300 SCALE))

(deftype Pos [x Int y Int])
(deftype Cell [data (Array Int) pos Pos])
(deftype State [data (Array Cell) cx Int cy Int])


(defn render-cell [cell xx yy renderer cx cy]
  (do
    (for (i 0 (count cell))
      (let [x (mod i 3)
            y (/ i 3)]
            (do 
              (if (= @(nth cell i) 1)
                (SDL_SetRenderDrawColor renderer 0 0 0 255)
                (SDL_SetRenderDrawColor renderer 255 255 255 255))
              (SDL_RenderFillRect renderer (address 
                (make-rect 
                  (- (* (+ xx (* x TS)) SCALE) cx)
                  (- (* (+ yy (* y TS)) SCALE) cy)
                  (* TS SCALE)
                  (* TS SCALE)))))))))


(defn handle-events [app rend state]
  (let [event (SDL_Event_init)
        r state]
    (do
      (while (SDL_PollEvent (address event))
        (let [et (event-type &event)]
          (case et 
            SDL_QUIT             (quit app)
            SDL_MOUSEBUTTONDOWN  (State.set-data! &r [])
            SDL_KEYDOWN          
              (case (event-keycode &event)
                SDLK_LEFT   
                  (do
                    (println "LEFT")
                    (State.set-cx! &r (- @(State.cx &r) 20)))

                SDLK_RIGHT  
                  (do
                    (println "RIGHT")
                    (State.set-cx! &r (+ @(State.cx &r) 20)))

                SDLK_UP     
                  (do
                    (println "UP")
                    (State.set-cy! &r (- @(State.cy &r) 20)))

                SDLK_DOWN   
                  (do
                    (println "DOWN")
                    (State.set-cy! &r (+ @(State.cy &r) 20)))

                ())
            ())))
      r)))
