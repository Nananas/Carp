;; This file contains examples of unsolved bugs

(load "Debug.carp")
(Debug.sanitize-addresses)
(Project.config "print-ast" true)

;; This shouldn't compile:
;; (defn faulty-repeat [n inpt]
;;     (let [str ""]
;;       (do
;;         (for [i 0 n]
;;           (set! str &(append @str @inpt)))
;;         @str)))
;; (defn main []
;;   (let [strings (faulty-repeat 20 "x")]
;;     (IO.println &strings)))

;; ;; Dangling reference to member variable.
;; (deftype S [f String])
;; (defn main []
;;   (let [s (S.init @"hello")
;;         r (S.f &s)
;;         _ (S.set-f s @"bye")]
;;     (IO.println r)))

;; ;; Dangling reference to variable.
;; (defn main []
;;   (let [s @"hello"
;;         r &s]
;;     (do (String.delete s)
;;         (IO.println r))))

;; Using the (Fn (String String) Bool) version of '=' can lead to memory error?
;; It takes ownership over the strings but while fails to detect the double use.
(defn main []
  (let [s @"hej"]
    (while (/= s @"svej")
      (do
        ;;(String.delete s)
        (set! s @"svej")))))

;; ;; This crashes the compiler:
;; (defn x [a] (the Inthdfdf a))

;; ;; The error message for this is really bad:
;; (defn f []
;;   (let [s @"hej"]
;;     (do (delete s)
;;         s)))
