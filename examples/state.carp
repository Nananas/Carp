

(deftype Pos [x Int y Int])
(deftype Cell [data (Array Int) pos Pos])
(deftype State 
  [data (Array Cell)  ;; map
   cx Int 
   cy Int
   kup Bool
   kdown Bool
   kleft Bool
   kright Bool])

(defn state-new [data]
  (State.init data 0 0 false false false false))



(defn handle-events [app rend state]
  (let [event (SDL_Event_init)]
    (while (SDL_PollEvent (address event))
      (let [et (event-type &event)]
        (with State
          (case et 
            SDL_QUIT             (quit app)
            SDL_MOUSEBUTTONDOWN  (set-data! state [])
            SDL_KEYDOWN
              (case (event-keycode &event)
                SDLK_LEFT (do
                    (set-kleft! state true))

                SDLK_RIGHT (do
                    (set-kright! state true))

                SDLK_UP (do
                    (set-kup! state true))

                SDLK_DOWN (do
                    (set-kdown! state true))

                ())

            SDL_KEYUP
              (case (event-keycode &event)
                SDLK_LEFT (do
                    (set-kleft! state false))

                SDLK_RIGHT (do
                    (set-kright! state false))

                SDLK_UP (do
                    (set-kup! state false))

                SDLK_DOWN (do
                    (set-kdown! state false))

                ())

            ()))))))


(defn update-state [state]
  (with State
    (do
      (when @(kleft state)
        (set-cx! state (- @(cx state) 10)))
      (when @(kright state)
        (set-cx! state (+ @(cx state) 10)))
      (when @(kup state)
        (set-cy! state (- @(cy state) 10)))
      (when @(kdown state)
        (set-cy! state (+ @(cy state) 10))))))