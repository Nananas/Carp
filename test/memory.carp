(load "Debug.carp")
(load "Test.carp")

(use IO)
(use Int)
(use Float)
(use Double)
(use Array)
(use System)
(use Char)
(use Test)

(Debug.sanitize-addresses)

(defn assert-no-leak [state f descr]
    (do
      (Debug.reset-memory-balance!)
      (f)
      (assert-equal state 0l (Debug.memory-balance) descr)))

(defn scope-1 []
  (let [s @""]
    ()))

(defn scope-2 []
  (let [s @""]
    (print &s)))

(defn scope-3 []
  (let [s @""]
    (do (print "")
        ())))

(defn f []
  @"")

(defn call-1 []
  (let [s (f)]
    ()))

(defn g [s]
  ())

(defn call-2 []
  (let [s (g @"")]
    ()))

(defn id [x]
  x)

(defn call-3 []
  (let [s (id (f))]
    ()))

(defn deref [x]
  @x)

(defn call-4 []
  (let [s (deref "")]
    ()))

(deftype A [s String])

(defn struct-1 []
  (let [a (A.init @"")]
    ()))

(deftype B [a A])

(defn struct-2 []
  (let [a (A.init @"")
        b (B.init a)]
    ()))

(defn struct-3 []
  (let [a (A.init @"")
        b (B.init a)
        c (B.set-a b (A.init @""))]
    ()))

(defn h [a]
  (A.set-s a @""))

(defn struct-4 []
  (let [a (A.init @"")
        b (B.init a)
        c (B.update-a b h)]
    ()))

(defn struct-5 []
  (let [a (A.init @"")
        b (B.init a)
        c (B.a &b)
        d (A.s c)]
    ()))

(defn setting-1 []
  (let [s @""]
    (do (set! &s @"")
        ())))

(defn setting-2 []
  (let [s @""]
    (do (set! &s s)
        ())))

(defn setting-3 []
  (let [s @""]
    (do (set! &s @&s)
        ())))

(defn setting-4 []
  (let [s ""]
    (do ;;(set! s @s) ;; Here the variable itself is a ref!
      ())))

(defn branching [b s]
  (if b
    (String.delete s)
    (do
      (let []
        ()))))

(defn if-1 []
  (branching true @""))

(defn if-2 []
  (branching false @""))

(defn if-3 []
  (if false
    ()
    (IO.println &@"TEST")))

(defn if-4 []
  (if false
    ()
    (IO.println &@"TEST")))

(defn main []
  (let []
    (with-test test
      (assert-no-leak test scope-1 "scope-1 does not leak")
      (assert-no-leak test scope-2 "scope-2 does not leak")
      (assert-no-leak test scope-3 "scope-3 does not leak")
      (assert-no-leak test call-1 "call-1 does not leak")
      (assert-no-leak test call-2 "call-2 does not leak")
      (assert-no-leak test call-3 "call-2 does not leak")
      (assert-no-leak test call-4 "call-2 does not leak")
      (assert-no-leak test struct-1 "struct-1 does not leak")
      (assert-no-leak test struct-2 "struct-2 does not leak")
      (assert-no-leak test struct-3 "struct-3 does not leak")
      (assert-no-leak test struct-4 "struct-4 does not leak")
      (assert-no-leak test struct-5 "struct-5 does not leak")
      (assert-no-leak test setting-1 "setting-1 does not leak")
      (assert-no-leak test setting-2 "setting-2 does not leak")
      (assert-no-leak test setting-3 "setting-3 does not leak")
      (assert-no-leak test setting-4 "setting-4 does not leak")
      (assert-no-leak test if-1 "if-1 does not leak")
      (assert-no-leak test if-2 "if-2 does not leak")
      ;; (assert-no-leak test if-3 "if-3 does not leak")
      ;; (assert-no-leak test if-4 "if-4 does not leak")
      (print-test-results test))))
